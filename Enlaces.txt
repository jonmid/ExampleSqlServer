


***** Api ASP.NET (CON SQL Server) *****
https://www.c-sharpcorner.com/article/crud-Asp-Net-web-api-with-entity-framework-in-Asp-Net-mvc/

***** Api ASP.NET (SIN SQL Server) ***** (ESTA)
https://docs.microsoft.com/en-us/aspnet/web-api/overview/data/using-web-api-with-entity-framework/part-1

***** Api ASP.NET Core (SIN SQL Server) *****
https://docs.microsoft.com/es-es/aspnet/core/tutorials/first-web-api?view=aspnetcore-2.2&tabs=visual-studio





***** Api ASP.NET (SIN SQL Server) (Desde cero) *****
https://docs.microsoft.com/en-us/aspnet/web-api/overview/getting-started-with-aspnet-web-api/tutorial-your-first-web-api







***** FORMATO JSON *****
config.Formatters.JsonFormatter.SupportedMediaTypes.Add(new MediaTypeHeaderValue("text/html") );





1. Crear modelos.
2. Crear controlador para cada modelo.
3. Crear migraciones.
	>> Abrir la consola desde: Tools -> NuGet Package Manager -> Package Manager Console
	>> Ejecutar el comandos: -> Enable-Migrations
	>> En el archivo que se crea (Configuration.cs) en el metodo (Seed) poner:
		context.Authors.AddOrUpdate(x => x.Id,
			new Author() { Id = 1, Name = "Jane Austen" },
			new Author() { Id = 2, Name = "Charles Dickens" },
			new Author() { Id = 3, Name = "Miguel de Cervantes" }
		);

		context.Books.AddOrUpdate(x => x.Id,
			new Book()
			{
				Id = 1,
				Title = "Pride and Prejudice",
				Year = 1813,
				AuthorId = 1,
				Price = 9.99M,
				Genre = "Comedy of manners"
			},
			new Book()
			{
				Id = 2,
				Title = "Northanger Abbey",
				Year = 1817,
				AuthorId = 1,
				Price = 12.95M,
				Genre = "Gothic parody"
			},
			new Book()
			{
				Id = 3,
				Title = "David Copperfield",
				Year = 1850,
				AuthorId = 2,
				Price = 15,
				Genre = "Bildungsroman"
			},
			new Book()
			{
				Id = 4,
				Title = "Don Quixote",
				Year = 1617,
				AuthorId = 3,
				Price = 8.95M,
				Genre = "Picaresque"
			}
		);
	>> Ejecutar los siguientes comandos:
		-> Add-Migration Initial
		-> Update-Database
4. Configurar Return en formato JSON:
	>> Abrir el archivo "WebApiConfig.cs".
	>> En el metodo "Register" aumentar:
		config.Formatters.JsonFormatter.SupportedMediaTypes.Add(new MediaTypeHeaderValue("text/html") );
5. Probar la Api.
	>> Ctrl + F5
6. Actualizar el controlador "BooksController" en el metodo "IQueryable" poner:
	return db.Books.Include(b => b.Author);
	
	
	





>> View -> SQL Server Object Explorer
>> Click derecho -> Add SQL Server
>> Seleccionar "Network"
>> Seleccionar Motor DB Local "SQLEXPRESS"
>> Database Name: Biblioteca
>> Click boton "Connect"


















